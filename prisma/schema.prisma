generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String   @id @default(uuid())
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  userId                   String   @unique
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  user                     User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

enum Role {
  user
  admin
}

enum Status {
  active
  inactive
}

model User {
  id         String      @id @default(uuid())
  name       String?
  username   String?     @unique
  email      String?     @unique
  password   String?
  role       Role        @default(user)
  image      String?
  notes      Notes[]
  folders    Folder[]
  Todos      Todo[]
  labels     Label[]
  remarks    Remark[]
  dailyGoals DailyGoal[]

  status        Status    @default(active)
  isVerfied     Boolean   @default(false)
  emailVerified DateTime?

  accounts  Account?
  sessions  Session[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Notes {
  id              String   @id @default(uuid())
  title           String
  description     String
  isPinned        Boolean? @default(false)
  isFavorite      Boolean? @default(false)
  backgroundColor String?
  textColor       String?
  userId          String
  notesFolderId   String?

  user         User    @relation(fields: [userId], references: [id])
  notesFolders Folder? @relation(fields: [notesFolderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Folder {
  id             String  @id @default(uuid())
  name           String  @unique
  userId         String
  parentFolderId String?
  notes          Notes[]
  // labels      Label[]

  user         User     @relation(fields: [userId], references: [id])
  parentFolder Folder?  @relation("FolderSubfolders", fields: [parentFolderId], references: [id])
  subfolders   Folder[] @relation("FolderSubfolders")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TodoStatus {
  in_progress
  pending
  completed
  missed
}

enum TodoPriority {
  low
  medium
  high
}

model Todo {
  id          String       @id @default(uuid())
  userId      String
  task        String
  description String?
  status      TodoStatus   @default(in_progress)
  priority    TodoPriority @default(low)
  labels      Label[]      @relation("TodoLabels")
  date        DateTime

  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([priority])
  @@index([userId, date])
}

model Label {
  id     String @id @default(uuid())
  name   String @unique
  userId String
  todos  Todo[] @relation("TodoLabels")

  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Remark {
  id      String   @id @default(uuid())
  userId  String
  content String
  date    DateTime
  user    User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, date])
}

model DailyGoal {
  id            String   @id @default(uuid())
  userId        String
  date          DateTime
  targetMinutes Int
  actualMinutes Int
  progress      Float?

  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, date])
}
