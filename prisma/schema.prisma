generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String   @id @default(uuid())
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  userId                   String   @unique
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  user                     User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model User {
  id            String        @id @default(uuid())
  name          String?
  username      String?       @unique
  email         String?       @unique
  password      String?
  role          Role          @default(user)
  image         String?
  emailVerified DateTime?
  status        Status        @default(active)
  isVerfied     Boolean       @default(false)
  token         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account?
  notes         Notes[]
  notesFolder   NotesFolder[]
  sessions      Session[]
}

model Notes {
  id              String       @id @default(uuid())
  title           String
  isPinned        Boolean?     @default(false)
  isFavorite      Boolean?     @default(false)
  backgroundColor String?
  textColor       String?
  userId          String
  notesFolderId   String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  description     String
  notesFolder     NotesFolder? @relation(fields: [notesFolderId], references: [id])
  user            User         @relation(fields: [userId], references: [id])
}

model NotesFolder {
  id        String   @id @default(uuid())
  name      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  notes     Notes[]
  User      User     @relation(fields: [userId], references: [id])
}

enum Role {
  user
  admin
}

enum Status {
  active
  inactive
}
